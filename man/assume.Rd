% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assume.R
\name{assume}
\alias{assume}
\title{Create a theoretical distribution}
\usage{
assume(distribution, df = NULL, ...)
}
\arguments{
\item{distribution}{The distribution in question, as a character. One of
\code{"F"}, \code{"Chisq"}, \code{"t"}, or \code{"z"}.}

\item{df}{The degrees of freedom parameter(s) for the \code{distribution}
supplied, as a numeric vector. For \code{distribution = "F"}, this should have
length two (e.g. \code{c(10, 3)}). For \code{distribution = "Chisq"} or
\code{distribution = "t"}, this should have length one. For
\code{distribution = "z"}, this argument is required.}

\item{...}{Currently ignored.}
}
\value{
An infer theoretical distribution that can be passed to helpers
like \code{\link[=visualize]{visualize()}}, \code{\link[=get_p_value]{get_p_value()}}, and \code{\link[=get_confidence_interval]{get_confidence_interval()}}.
}
\description{
Fill in once interface solidifies.
}
\examples{
  
# construct theoretical distributions ---------------------------------

# F distribution
# with the `partyid` explanatory variable
assume(
  distribution = "F", 
  c(length(unique(gss$partyid)) - 1, nrow(gss) - 1)
)

# Chi-squared goodness of fit distribution
# on the `finrela` variable
assume("Chisq", length(unique(gss$finrela)) - 1)

# Chi-squared test of independence
# on the `finrela` and `sex` variables
assume(
  distribution = "Chisq", 
  df = (length(unique(gss$finrela)) - 1) * 
       (length(unique(gss$sex)) - 1)
)

# T distribution
assume("t", nrow(gss) - 1)

# Z distribution
assume("z")

\dontrun{
# each of these distributions can be passed to infer helper
# functions alongside observed statistics!

# for example, a 1-sample t-test -------------------------------------

# calculate the observed statistic 
obs_stat <- gss \%>\%
  specify(response = hours) \%>\%
  hypothesize(null = "point", mu = 40) \%>\%
  calculate(stat = "t")

# construct a null distribution
null_dist <- assume("t", nrow(gss) - 1)

# juxtapose them visually
visualize(null_dist) + 
  shade_p_value(obs_stat, direction = "both")
  
# calculate a p-value
get_p_value(null_dist, obs_stat, direction = "both")

# or, an F test ------------------------------------------------------

# calculate the observed statistic 
obs_stat <- gss \%>\% 
  specify(age ~ partyid) \%>\%
  calculate(stat = "F")

# construct a null distribution
null_dist <- 
  assume(
    distribution = "F", 
    c(length(unique(gss$partyid)) - 1, nrow(gss) - 1)
  )

# juxtapose them visually
visualize(null_dist) + 
  shade_p_value(obs_stat, direction = "both")
  
# calculate a p-value
get_p_value(null_dist, obs_stat, direction = "both")
}
    
}
